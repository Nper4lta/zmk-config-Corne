/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
/{
	macros {
			randMacro: randMacro {
					label = "randMacros";
					compatible = "zmk,behavior-macro";
					#binding-cells = <0>;
					bindings
							= <&kp QMARK &kp LS(B) &kp LS(A) &kp LS(K) &kp LS(A) &kp QMARK &kp P &kp E &kp R &kp N4 &kp L &kp T &kp A>
							;
		};
	};
};

/{
	macros {
			copyMacro: copyMacro {
					label = "copy_macro";
					compatible = "zmk,behavior-macro";
					#binding-cells = <0>;
					bindings
							= <&macro_press &kp LGUI>
							, <&kp C>
							, <&macro_release &kp LGUI>
							;
		};
	};
};

/{
	combos{
		compatible = "zmk,combos";
		combo_something {
			timeout-ms = <50>;
			bindings = <&randMacro>;
			key-positions = <0 1>;
			layers = <3>;
		};
	};
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
            &mt ESC TAB  &kp Q  &kp W     &kp E               &kp R        &kp T              &kp Y  &kp U      &kp I    &kp O      &kp P  &kp BSPC
         &lt 1 C_VOL_UP  &kp A  &kp S     &kp D               &kp F        &kp G              &kp H  &kp J      &kp K    &kp L   &kp SEMI   &kp SQT
&mt LSHFT C_VOLUME_DOWN  &kp Z  &kp X     &mt &copyMacro C              &kp V        &kp B              &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH   &kp ESC
                                       &kp LGUI  &lt 1 LEFT_CONTROL  &lt 3 SPACE    &mt ENTER SPACE  &lt 2 C_PP &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
   &kp TAB        &kp N1        &kp N2        &kp N3        &kp N4        &kp N5      &kp N6    &kp N7    &kp N8     &kp N9  &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN    &kp UP  &kp RIGHT  &trans    &trans
 &kp LSHFT        &trans        &trans        &trans        &trans        &trans      &trans    &trans    &trans     &trans  &trans    &trans
                                            &kp LGUI        &trans     &kp SPACE     &kp RET    &trans  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  | v %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp TAB  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET   &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR   &kp BSPC
&kp LCTRL    &trans  &trans    &trans    &trans     &trans    &kp MINUS  &kp EQUAL         &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT    &trans  &trans    &trans    &trans     &trans    &kp UNDER   &kp PLUS         &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI    &trans  &kp SPACE      &kp RET     &trans         &kp RALT
            >;
        };

        numpad {
            bindings = <
&trans  &trans                 &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT  &trans     &trans  &kp N1        &kp N2  &kp N3   &mt KP_DIVIDE ASTRK                     &mt CARET BACKSPACE
&trans  &trans  &mt C_VOLUME_DOWN C_VOLUME_UP  &kp K_APPLICATION      &trans  &trans     &trans  &kp N4        &kp N5  &kp N6  &mt KP_SUBTRACT PLUS  &mt RIGHT_PARENTHESIS LEFT_PARENTHESIS
&trans  &trans                         &trans             &trans      &trans  &trans    &mt Y X  &kp N7        &kp N8  &kp N9            &kp PERIOD                               &kp EQUAL
                                                          &trans      &trans  &trans     &trans  &trans  &kp NUMBER_0
            >;
        };
    };
};
